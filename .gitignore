Usage
{{Bar box
|width   =  ''width of the graph''         (optional)
|barwidth=  ''width of the bar area''      (optional, defaults to 100px)
|float   =  (left|right|none)          (optional, defaults to none)
|title   =  ''title of the chart''         (optional)
|titlebar=  ''title bar colour''           (optional, defaults to none)
|left1   =  ''first left column header''   (optional)
|left2   =  ''second left column header''  (optional)
|right1  =  ''first right column header''  (optional)
|right2  =  ''second right column header'' (optional)
|bars    =  ''chart contents''             (see below)
|caption =  ''caption under the chart''    (optional)
}}
Alternatives to avoid Wikipedia's Post-expand include size limit
Pages with many boxes and charts may come close to or exceed Wikipedia's Post-expand include size limit. In these cases consider using Module:Bar as follows:

{{Bar box}} → {{#invoke:Bar|box}}
{{Bar percent}} → {{#invoke:Bar|percent}}
{{Bar pixel}} → {{#invoke:Bar|pixel}}
{{Bar log}} → {{#invoke:Bar|log}}
{{Bar stacked}} → {{#invoke:Bar|stacked}}
{{Bar gap}} → {{#invoke:Bar|gap}}
Tracking category
Category:Pages using bar box without float left or float right (3,492)
See also
{{Vertical bar chart}}
{{Bar chart}}
{{Data bars}}
WP:Graphs
hidevte
Graph, chart and plot templates
Many types	
{{Graph:Chart}} Module:Chart
Graph Extension	
{{Graph:Chart}} {{Graph:Lines}} {{Graph:Stacked}} {{Map with marks}}
Bar	
{{Bar chart}} {{Bar box}} Module:Bar
Line	
{{Graph:Lines}}
Scatter plot	
{{Dot chart}}
Pie chart	
{{Pie chart}}
Tree	
{{Tree chart}} {{Ahnentafel}} {{Clade}}
Stacked	
{{Stacked bar}}
Cartogram	
{{Graph:Map}} {{Global Heat Maps by Year}}
Color legends	
{{Legend}} {{Legend-line}} {{BrewerColorLegends}}
The above documentation is transcluded from Module:Bar/doc. (edit | history)
Editors can experiment in this module's sandbox (edit | diff) and testcases (create) pages.
Subpages of this module.
 require('Module:Lua class')
require('strict')

local BarBox = class('BarBox', {
	_css = 'Module:Bar/styles.css',

	__init = function (self, args)
		self.css			 = args[1]  or args.css
		self.float			 = args[2]  or args.float or 'none'
		self.backgroundcolor = args[3]  or args.backgroundcolor or 'white'
		self.borderwidth	 = args[4]  or args.borderwidth or '1'
		self.style			 = args[5]  or args.style
		self.width			 = args[6]  or args.width-- or 'auto'
		self.barwidth		 = args[7]  or args.barwidth or '100px'
		self.lineheight		 = args[8]  or args.lineheight-- or '1.6'
		self.title			 = args[9]  or args.title
		self.titlebar		 = args[10] or args.titlebar-- or 'none'
		self.left1			 = args[11] or args.left1
		self.left2			 = args[12] or args.left2
		self.right1			 = args[13] or args.right1
		self.right2			 = args[14] or args.right2
		self.bars			 = args[15] or args.bars
		self.caption		 = args[16] or args.caption -- deprecated
		self.footer			 = args[17] or args.footer or args[16] or args.caption
	end,

	create = function (cls, args)
		args = mw.clone(args)
		args.float	  = args.float and args.float:lower()
		args.width	  = tonumber(args.width) and args.width .. 'px' or args.width and args.width:lower()
		args.barwidth = tonumber(args.barwidth) and args.barwidth .. 'px' or args.barwidth and args.barwidth:lower()
		return cls(args)
	end,

	_sDefaultAlign = 'lrlr',
	_tDefaultAlign = {false, 'r', false, 'r'},

	_setAlign = function (obj, align)
		obj._alignClasses = {}
		for i, d in ipairs(obj._tDefaultAlign) do
			local a = align:sub(i,i)
			if a == 'l' then
				a = false
			elseif a == 'd' then
				a = d
			elseif a ~= 'c' and a ~= 'r' then
				error('unrecognized align[' .. i .. ']')
			end
			obj._alignClasses[i] = a and 'class=bb-' .. a
		end
	end,

	html = function (self)
		local output = {}

		local frame = mw.getCurrentFrame()
		output[1] = frame:extensionTag('templatestyles', '', {src=self._css}) .. '\n'
		output[2] = self.css and frame:extensionTag('templatestyles', '', {src=self.css}) .. '\n' or ''

		local class = 'barbox'
		if self.float == 'left' or self.float == 'right' then
			class = class .. ' t' .. self.float
		end

		output[3] =
			'<div class="' .. class .. '" style="background:' .. self.backgroundcolor ..
			'; border:' .. self.borderwidth .. 'px solid silver' ..
			(self.float == 'center' and '; margin:0 auto' or '') ..
			(self.width and '; width:' .. self.width or '') ..
			(self.style and '; ' .. self.style or '') .. '">\n' ..
				'{|' .. (self.lineheight and ' style="line-height:' .. self.lineheight .. '"' or '') .. '\n'

			output[4] = self.title and
				'|+ class=bb-default' .. (self.titlebar and ' style="background:' .. self.titlebar .. '"' or '') .. ' |\n' ..
				self.title .. '\n'
			or ''

			output[5] = '|- class=bb-default style="font-size:88%; min-height:4px"\n'
				if self._alignClasses then -- same as self.__class._alignClasses
					self._alignClasses = self._alignClasses
					self.__class._alignClasses = nil
				else
					self._setAlign(self, self._sDefaultAlign)
				end

				local attributes =
					not self.left2 and 'colspan=2' .. (self._alignClasses[1] and ' ' .. self._alignClasses[1] or '') or self._alignClasses[1]
				output[6] = '!' .. (attributes and attributes .. '|' or '') .. (self.left1 or ' ')
				output[7] = self.left2 and '!!' .. (self._alignClasses[2] and self._alignClasses[2] .. '|' or '') .. self.left2 or ''
				output[8] = '!!style="width:' .. self.barwidth .. '"| '
				attributes =
					not self.right2 and 'colspan=2' .. (self._alignClasses[4] and ' ' .. self._alignClasses[4] or '') or self._alignClasses[3]
				output[9] = '!!' .. (attributes and attributes .. '|' or '') .. (self.right1 or self.right2 and ' ' or '')
				output[10] = self.right2 and '!!' .. (self._alignClasses[4] and self._alignClasses[4] .. '|' or '') .. self.right2 or ''
			output[11] = '\n'

			output[12] = self.bars and self.bars .. '\n' or ''

			if self.caption then
				output[15] = '\n[[Category:Pages using bar box with deprecated caption parameter]]'
			else
				output[15] = ''
			end
			output[13] = self.footer and
				'|- class=bb-default\n| colspan=5 style="padding:5px 0" | ' .. -- <p> is created if \n precedes the footer
				self.footer .. '\n'
			or ''
		output[14] = '|}\n</div>'

		return table.concat(output)
	end,

	__tostring = function (self)
		return self.html()
	end,

	percent = function (args)
		local output = {}
		local percentage = (args[3] or '0') .. '%'

		output[1] = '|-' .. (args.bg and 'style="background:' .. args.bg .. '"' or '') .. '\n'
			output[2] = '|colspan=2 class=bb-min8|' .. (args[1] or ' ')
			output[3] = '||class=bb-b|'
				output[4] = '<div style="background:' .. (args[2] or 'gray') .. '; width:' .. percentage .. '">&#8203;</div>'
			output[5] = '||' .. (args.note and '' or 'colspan=2 class=bb-r|') .. (args[4] or percentage)
			output[6] = args.note and '||class=bb-r|' .. args.note or ''

		return table.concat(output)
	end,

	pixel = function (args)
		local output = {}
		local pixels = args[3] or '0'

		output[1] = '|-' .. (args.bg and 'style="background:' .. args.bg .. '"' or '') .. '\n'
			output[2] = '|colspan=2|' .. (args[1] or ' ')
			output[3] = '||class=bb-b|'
				output[4] = '<div style="background:' .. (args[2] or 'gray') .. '; width:' .. pixels .. 'px">&#8203;</div>'
			output[5] = '||class="bb-min3' .. (args.note and '"' or ' bb-r" colspan=2') .. '|' .. (args[5] or pixels .. (args[4] or ''))
			output[6] = args.note and '||class=bb-r|' .. args.note or ''

		return table.concat(output)
	end,

	stacked = function (cls, args)
		local output = {}

		output[1] = args.id and
			'|-class="mw-collapsible' .. (args.collapsed and ' mw-collapsed' or '') .. '" id=mw-customcollapsible-' .. args.id .. '\n'
		or '|-\n'
			if not cls._alignClasses then
				cls._setAlign(cls, args.align and args.align:lower() or cls._sDefaultAlign)
			end

			local attributes =
				not args.note1 and 'colspan=2' .. (cls._alignClasses[1] and ' ' .. cls._alignClasses[1] or '') or cls._alignClasses[1]
			output[2] = '|' .. (attributes and attributes .. '|' or '') .. (args[1] or ' ')
			output[3] = args.note1 and '||' .. (cls._alignClasses[2] and cls._alignClasses[2] .. '|' or '') .. args.note1 or ''
			output[4] = '||class=bb-b|'

				local len = 0 -- can't use #args because of [[Module:Arguments#Known limitations]]
				for k in pairs(args) do
					local idx = tonumber(k) or 0
					if idx > len then len = idx end
				end

				if args.bkgclasses then -- used when wikitext minimization is essential
					for i = 1, len-2 do
						local width, delim, title --is delim reset every cycle?
						width = args[i+2] or 0
						width = tonumber(('%.2f'):format(width))
						if width > 0 then
							if not delim then -- assuming title types are consistent
								delim = tonumber(args['title' .. i]) and '' or '"'
							end
							title = args['title' .. i] and ' title=' .. delim .. args['title' .. i] .. delim or ''
							output[#output+1] =
								'<div' .. title .. ' class=' .. args.bkgclasses[i] .. ' style=width:' .. width .. 'px></div>'
						end
					end
				else
					for i = 1, (len-2) / 2 do
						local width, title, background
						width = args[2*i + 2] or 0
						width = tonumber(('%.2f'):format(width))
						if width > 0 then
							title = args['title' .. i] and ' title="' .. args['title' .. i] .. '"' or ''
							background = args[2*i + 1] or 'gray'
							output[#output+1] =
								'<div' .. title .. ' style="background:' .. background .. ';width:' .. width .. 'px"></div>'
						end
					end
				end

				if #output == 4 then
					output[5] = ' '
				end

			attributes =
				not args.note2 and 'colspan=2' .. (cls._alignClasses[4] and ' ' .. cls._alignClasses[4] or '') or cls._alignClasses[3]
			output[#output+1] = '||' .. (attributes and attributes .. '|' or '') .. (args[2] or args.note2 and ' ' or '')
			output[#output+1] = args.note2 and '||' .. (cls._alignClasses[4] and cls._alignClasses[4] .. '|' or '') .. args.note2 or ''

		return table.concat(output)
	end,

	gap = function (args)
		local output = {}
		local height = tonumber(args.height) and args.height .. 'px' or args.height and args.height:lower() or '10px'

		output[1] = '|-\n'
			output[2] = '|colspan=5 style="height:' .. height .. '"|' .. (args[1] or '')

		return table.concat(output)
	end,

	__classmethods = {'create', 'stacked'},
	__staticmethods = {'_setAlign', 'percent', 'pixel', 'gap'},
	__slots = {'_alignClasses'}
})


local getArgs = require('Module:Arguments').getArgs

local p = {BarBox}

function p.box(frame)
	local args = getArgs(frame)
	local box = BarBox.create(args)
	return tostring(box)
end

function p.percent(frame)
	local args = getArgs(frame)
	return BarBox.percent(args)
end

function p.pixel(frame)
	local args = getArgs(frame)
	return BarBox.pixel(args)
end

function p.log(frame)
	local args = getArgs(frame)
	local outArgs = {[1] = args[2], [2] = args[3]}
	outArgs[3] = math.log((tonumber(args[4]) ~= nil) and (args[4] + 1) or 100)/
		math.log((tonumber(args[1]) ~= nil) and args[1] or 2)*30
	outArgs[5] = ((args[6] or '') ~= '') and args[6] or ((args[4] or '') .. (args[5] or ''))
	return BarBox.pixel(outArgs)
end

function p.stacked(frame)
	local yesno = require('Module:Yesno')
	local args = getArgs(frame, {
		valueFunc = function (key, value)
			if value then
				if key == 'collapsed' then
					return yesno(value)
				elseif key == 'bkgclasses' then
					return mw.text.jsonDecode(value) -- string to table
				end
				value = mw.text.trim(value)
				if value ~= '' then
					return value
				end
			end
			return nil
		end
	})
	return BarBox.stacked(args)
end

function p.gap(frame)
	local args = getArgs(frame)
	return BarBox.gap(args)
end

return p
Categories: Modules in betaModules subject to page protectionBar chart templatesGraph, chart and plot templatesObject-oriented modules
This page was last edited on 15 July 2024, at 00:11.
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view
Pages in category "Modules subject to page protection"
The following 200 pages are in this category, out of approximately 447 total. This list may not reflect recent changes.

(previous page) (next page)
0–9
Module:2024 Belgorod incursion detailed map
A
Module:A or an
Module:A or an/words
Module:About
Module:Adjacent stations
Module:Adjacent stations/London Underground
Module:Administrators' noticeboard archives
Module:AfC submission catcheck
Module:Age
Module:Airport destination list
Module:Aligned dates list
Module:Aligned table
Module:Anchor
Module:Annotated link
Module:Arbcom election banner
Module:ArbComOpenTasks
Module:Archive
Module:Archive list
Module:Arguments
Module:Armenian
Module:Article history
Module:Article history/Category
Module:Article history/config
Module:Article stub box
Module:Articles by quality
Module:Asbox
Module:Asbox stubtree
Module:ATP rankings
Module:Attached KML
Module:Authority control
Module:Automatic archive navigator
Module:Autotaxobox
B
Module:Babel
Module:Bad title suggestion
Module:Banner shell
Module:Bar
Module:Bar box
Module:Bibleverse
Module:Biota infobox
Module:Biota infobox/core
Module:Biota infobox/data
Module:Box-header
Module:British regnal year
Module:British regnal year/data
Module:Buffer
Module:Build bracket
C
Module:Calendar TOC
Module:CallAssert
Module:Catalog lookup link
Module:Category disambiguation
Module:Category handler
Module:Category handler/blacklist
Module:Category handler/config
Module:Category handler/data
Module:Category handler/shared
Module:Category pair
Module:Celestial object quadrangle
Module:Charmap
Module:Check blp parameter
Module:Check for clobbered parameters
Module:Check for deprecated parameters
Module:Check for unknown parameters
Module:Check isxn
Module:Check winner by scores
Module:Checkuser
Module:Chem2
Module:Chessboard
Module:CIA World Factbook
Module:Citation/CS1
Module:Citation/CS1/COinS
Module:Citation/CS1/Configuration
Module:Citation/CS1/Date validation
Module:Citation/CS1/Identifiers
Module:Citation/CS1/Suggestions
Module:Citation/CS1/Utilities
Module:Citation/CS1/Whitelist
Module:Cite book
Module:Cite news
Module:Cite tweet
Module:Cite web
Module:Clade
Module:Clickable button
Module:Clickable button 2
Module:Climate chart
Module:Collapsible list
Module:College color
Module:College color/data
Module:Color
Module:Color contrast
Module:Color contrast/colors
Module:Commons link
Module:Compact list
Module:Complex date
Module:Conservation status
Module:Convert
Module:Convert character width
Module:Convert character width/data
Module:Convert/data
Module:Convert/text
Module:Coordinates
Module:Countdown
Module:Country alias
Module:CountryAdjectiveDemonym
Module:CountryData
Module:Coxeter–Dynkin diagram
Module:CS1
Module:Csdcheck
Module:Current events calendar
D
Module:Data
Module:Date time
Module:Date time validation
Module:DecodeEncode
Module:Delink
Module:Demo
Module:Diff
Module:Disambiguation
Module:Distinguish
Module:Documentation
Module:Documentation/config
Module:Duration
E
Module:EditAtWikidata
Module:Effective protection expiry
Module:Effective protection level
Module:Episode list
Module:Episode table
Module:Error
Module:Escape
Module:Ethiopian wars and insurgencies detailed map
Module:Excerpt
Module:Excerpt slideshow
Module:Excerpt/config
Module:Excerpt/portals
Module:External links
F
Module:Factorization
Module:Fba
Module:File link
Module:Find country
Module:Find sources
Module:Find sources/config
Module:Find sources/templates/Find general sources
Module:Find sources/templates/Find sources mainspace
Module:Find sources/templates/Find sources medical
Module:Find sources/templates/Find sources video games
Module:FindYDCportal
Module:Flag
Module:Flagg
Module:Flex columns
Module:Football squad
Module:Footnotes
Module:For
Module:For loop
Module:For nowiki
G
Module:Gallery
Module:Geological time
Module:GetParameters
Module:GetShortDescription
Module:GHS phrases
Module:Good article topics
Module:Good article topics/data
Module:GR header
Module:Graph
Module:Graphical timeline
Module:Gridiron color
Module:Gutenberg
H
Module:Hatnote
Module:Hatnote inline
Module:Hidden ping
Module:High-use
Module:Highest archive number
Module:Horizontal timeline
Module:HS listed building row
I
Module:Icon
Module:Icon/data
Module:If any equal
Module:If empty
Module:If in category
Module:If in page
Module:If preview
Module:In5
Module:Indent
Module:Infobox
Module:Infobox body of water tracking
Module:Infobox date field metadata
Module:Infobox dim
Module:Infobox gene
Module:Infobox mapframe
Module:Infobox road/sections
Module:InfoboxImage
Module:Interlinear
Module:Internet Archive
Module:InterPro content
Module:Interval
Module:Interwiki extra
Module:InterwikiTable
Module:IP
Module:IPAc-en
Module:IPAc-en/data
Module:IPAc-en/phonemes
Module:IPAc-en/pronunciation
Module:Is instance
(previous page) (next page)
Category: Modules by development status
Hidden categories: Wikipedia template categories with no topic or description
Module:Check for unknown parameters is used to check for uses of unknown parameters in a template or module. It may be appended to a template at the end or called directly from a module.

Usage
From a template
To sort entries into a tracking category by parameter, use:

{{#invoke:Check for unknown parameters|check|unknown=[[Category:Some tracking category|_VALUE_]]|arg1|arg2|arg3|argN}}
To sort the entries into a tracking category by parameter with a preview error message, use:

{{#invoke:Check for unknown parameters|check|unknown=[[Category:Some tracking category|_VALUE_]]|preview=unknown parameter "_VALUE_"|arg1|arg2|...|argN}}
For an explicit red error message, use:

{{#invoke:Check for unknown parameters|check|unknown=<span class="error">Sorry, I don't recognize _VALUE_</span>|arg1|arg2|...|argN}}
To use Lua patterns, use:

{{#invoke:Check for unknown parameters|check|unknown=[[Category:Some tracking category|_VALUE_]]|preview=unknown parameter "_VALUE_"|arg1|arg2|...|argN|regexp1=header[%d]+|regexp2=date[1-9]}}
From a module
To call from a module, use:

local checkForUnknownParameters = require("Module:Check for unknown parameters")
local result = checkForUnknownParameters._check(validArgs, args)
Where the first set of args are the module args below and the second set of args are the parameters that are checked.

Parameters
arg1, arg2, ..., argN, are the known parameters.
Unnamed (positional) parameters can be added too: |1|2|arg1|arg2|....
Lua patterns (similar to regular expressions) usage with parameters is also supported (such as: |regexp1=header[%d]+, |regexp2=date[1-9], |regexp3=data[%d]+[abc]?). This is useful when there are many known parameters which use a systematic pattern.
|unknown= – what happens when an unknown parameter is used. Typically use either a tracking category to place pages that use unknown parameters, or an error.
|preview= – the text to be displayed when in preview mode and an unknown parameter is used.
The _VALUE_ keyword, if used, will be changed to the name of the parameter. This is useful for either sorting the entries in a tracking category, or for provide more explicit information.
|ignoreblank=1 – by default, the module makes no distinction between a defined-but-blank parameter and a non-blank parameter. That is, both unlisted |foo=x and |foo= are reported. To only track non-blank parameters use |ignoreblank=1.
|showblankpositional=1 – by default, the module ignores blank positional parameters. That is, an unlisted |2= is ignored. To include blank positional parameters in the tracking use |showblankpositional=1.
Example
{{Infobox
| above = {{{name|}}}

| label1 = Height
| data1 = {{{height|}}}

| label2 = Weight
| data2 = {{{weight|}}}

| label3 = Website
| data3 = {{{website|}}}
}}<!-- 
  end infobox, start tracking
-->{{#invoke:Check for unknown parameters|check
| unknown = {{Main other|[[Category:Some tracking category|_VALUE_]]}}
| preview = unknown parameter "_VALUE_" | height | name | website | weight 
}}
Call from within Lua code
See the end of Module:Rugby box for a simple example or Module:Infobox3cols or Module:Flag for more complicated examples.

See also
Category:Unknown parameters (293) (category page can have header {{Unknown parameters category}})
Module:Params – for complex operations involving parameters
Template:Checks for unknown parameters – adds documentation to templates using this module
Module:Check for deprecated parameters – similar module that checks for deprecated parameters
Module:Check for clobbered parameters – module that checks for conflicting parameters
Module:TemplatePar – similar function (originally from dewiki)
Template:Parameters and Module:Parameters – generates a list of parameter names for a given template
Project:TemplateData based template parameter validation
Module:Parameter validation checks a lot more
User:Bamyers99/TemplateParametersTool - A tool for checking usage of template parameters
The above documentation is transcluded from Module:Check for unknown parameters/doc. (edit | history)
Editors can experiment in this module's sandbox (edit | diff) and testcases (edit | run) pages.
Subpages of this module.
 -- This module may be used to compare the arguments passed to the parent
-- with a list of arguments, returning a specified result if an argument is
-- not on the list

require ('strict');

local p = {}

local function trim(s)
	return s:match('^%s*(.-)%s*$')
end

local function isnotempty(s)
	return s and s:match('%S')
end

local function clean(text)
	-- Return text cleaned for display and truncated if too long.
	-- Strip markers are replaced with dummy text representing the original wikitext.
	local pos, truncated
	local function truncate(text)
		if truncated then
			return ''
		end
		if mw.ustring.len(text) > 25 then
			truncated = true
			text = mw.ustring.sub(text, 1, 25) .. '...'
		end
		return mw.text.nowiki(text)
	end
	local parts = {}
	for before, tag, remainder in text:gmatch('([^\127]*)\127[^\127]*%-(%l+)%-[^\127]*\127()') do
		pos = remainder
		table.insert(parts, truncate(before) .. '&lt;' .. tag .. '&gt;...&lt;/' .. tag .. '&gt;')
	end
	table.insert(parts, truncate(text:sub(pos or 1)))
	return table.concat(parts)
end

function p._check(args, pargs)
	if type(args) ~= "table" or type(pargs) ~= "table" then
		-- TODO: error handling
		return
	end

	-- create the list of known args, regular expressions, and the return string
	local knownargs = {}
	local regexps = {}
	for k, v in pairs(args) do
		if type(k) == 'number' then
			v = trim(v)
			knownargs[v] = 1
		elseif k:find('^regexp[1-9][0-9]*$') then
			table.insert(regexps, '^' .. v .. '$')
		end
	end

	-- loop over the parent args, and make sure they are on the list
	local ignoreblank = isnotempty(args['ignoreblank'])
	local showblankpos = isnotempty(args['showblankpositional'])
	local values = {}
	for k, v in pairs(pargs) do
		if type(k) == 'string' and knownargs[k] == nil then
			local knownflag = false
			for _, regexp in ipairs(regexps) do
				if mw.ustring.match(k, regexp) then
					knownflag = true
					break
				end
			end
			if not knownflag and ( not ignoreblank or isnotempty(v) )  then
				table.insert(values, clean(k))
			end
		elseif type(k) == 'number' and knownargs[tostring(k)] == nil then
			local knownflag = false
			for _, regexp in ipairs(regexps) do
				if mw.ustring.match(tostring(k), regexp) then
					knownflag = true
					break
				end
			end
			if not knownflag and ( showblankpos or isnotempty(v) ) then
				table.insert(values, k .. ' = ' .. clean(v))
			end
		end
	end

	-- add results to the output tables
	local res = {}
	if #values > 0 then
		local unknown_text = args['unknown'] or 'Found _VALUE_, '

		if mw.getCurrentFrame():preprocess( "{{REVISIONID}}" ) == "" then
			local preview_text = args['preview']
			if isnotempty(preview_text) then
				preview_text = require('Module:If preview')._warning({preview_text})
			elseif preview_text == nil then
				preview_text = unknown_text
			end
			unknown_text = preview_text
		end
		for _, v in pairs(values) do
			-- Fix odd bug for | = which gets stripped to the empty string and
			-- breaks category links
			if v == '' then v = ' ' end

			-- avoid error with v = 'example%2' ("invalid capture index")
			local r = unknown_text:gsub('_VALUE_', {_VALUE_ = v})
			table.insert(res, r)
		end
	end

	return table.concat(res)
end

function p.check(frame)
	local args = frame.args
	local pargs = frame:getParent().args
	return p._check(args, pargs)
end

return p
Categories: Modules subject to page protectionModules that add a tracking categoryTemplate metamodules
This page was last edited on 29 August 2024, at 18:05.
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. W
